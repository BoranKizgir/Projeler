# -*- coding: utf-8 -*-
"""Gizem√∂dev.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mcowyHzPwBm88kKf9al0-ruUUqz14k-H
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Veri setini oku
df = pd.read_csv("Most Streamed Spotify Songs 2024.csv", encoding='ISO-8859-1')

# Modelde kullanƒ±lacak s√ºtunlar
columns = [
    'Track Score',
    'Spotify Streams',
    'Spotify Playlist Count',
    'Spotify Playlist Reach',
    'SiriusXM Spins',
    'Deezer Playlist Count',
    'Deezer Playlist Reach',
    'Amazon Playlist Count',
    'Pandora Streams',
    'Pandora Track Stations',
    'Soundcloud Streams',
    'Shazam Counts',
    'Explicit Track'
]

df_model = df[columns].copy()

# Sayƒ±sal verileri d√∂n√º≈üt√ºr
for col in df_model.columns:
    df_model[col] = df_model[col].astype(str).str.replace(',', '')
    df_model[col] = pd.to_numeric(df_model[col], errors='coerce')

df_model.fillna(df_model.mean(), inplace=True)

# √ñzellikler ve hedef
X = df_model.drop('Explicit Track', axis=1)
y = df_model['Explicit Track']

# Eƒüitim ve test seti olu≈ütur
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# √ñzellikleri √∂l√ßekle
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# 4 sƒ±nƒ±flandƒ±rma algoritmasƒ±nƒ± uygula

# 1. Logistic Regression
log_model = LogisticRegression()
log_model.fit(X_train_scaled, y_train)
log_preds = log_model.predict(X_test_scaled)

# 2. K-Nearest Neighbors
knn_model = KNeighborsClassifier(n_neighbors=5)
knn_model.fit(X_train_scaled, y_train)
knn_preds = knn_model.predict(X_test_scaled)

# 3. Decision Tree
tree_model = DecisionTreeClassifier()
tree_model.fit(X_train, y_train)
tree_preds = tree_model.predict(X_test)

# 4. Random Forest
rf_model = RandomForestClassifier(n_estimators=100)
rf_model.fit(X_train, y_train)
rf_preds = rf_model.predict(X_test)

# Sonu√ßlarƒ± yazdƒ±r
models = {
    "Logistic Regression": log_preds,
    "K-Nearest Neighbors": knn_preds,
    "Decision Tree": tree_preds,
    "Random Forest": rf_preds
}

for name, preds in models.items():
    print(f"\nüîç {name} Sonu√ßlarƒ±:")
    print("Doƒüruluk (Accuracy):", accuracy_score(y_test, preds))
    print("Confusion Matrix:\n", confusion_matrix(y_test, preds))
    print("Classification Report:\n", classification_report(y_test, preds))